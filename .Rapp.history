#########################################################
####   COX MODEL WITH INTERVAL CENSORING        #######
#########################################################
rm(list=ls())#
library(Rcpp)#
sourceCpp("MLE.cpp")#
sourceCpp("MLE_Pan.cpp")#
#
# NumIt is the number of replications#
  NumIt = 100#
# n is the number of observations#
  n = 500#
# m is the dimension of the covariate#
  m= 3#
# b0 is beta_0, the finite dimensional regression parameter#
  b0=c(-1,1,0.5)#
timeMat <- NULL#
normMat <- matrix(0, nrow= NumIt, ncol= 2)#
colnames(normMat) <- c("Hooke","Pan")#
X<-matrix(rep(0,3*n),n,3)#
Y<-matrix(rep(0,3*n),n,3)#
time_obs<-rep(0,n)#
tt<-rep(0,n)#
uu<-rep(0,n)#
ind<-rep(0,n)#
covariate<-matrix(rep(0,3*n),n,3)#
normMat <- matrix(0,nrow=NumIt,ncol=2)#
colnames(normMat) <- c("Hooke","Pan")#
#
samplesize<-n#
#
for (j in 1:NumIt)#
{#
    sim = 2001+j#
    set.seed(sim)#
    print(j)	#
    for(i in 1:samplesize){#
    covariate[i,1]<-runif(1)#
    covariate[i,2]<-runif(1)#
    covariate[i,3]<-rbinom(1,size = 1,prob = 0.5)#
    tmp<-runif(1)#
    time_obs[i]<- (-log(tmp)*exp(-sum(b0*covariate[i,])))^(1/3)#
    tt[i]<-runif(n=1,min=0,max=2)#
    uu[i]<-runif(n=1,min=0,max=2)#
    if (tt[i]>uu[i])#
    {#
    	x<-tt[i]#
    	y<-uu[i]#
    	tt[i]<-y#
    	uu[i]<-x#
    }#
    if(time_obs[i]<=tt[i]){#
      ind[i]<-1#
      }#
    if(time_obs[i]>uu[i]){#
      ind[i]<-3#
      }#
     if((time_obs[i]>tt[i])&(time_obs[i]<uu[i])){#
      ind[i]<-2#
    }#
  }#
    X<- cbind(covariate[,1],covariate[,2],covariate[,3])#
    Y<- cbind(tt,uu,ind)#
    	# MLE#
	starter_mle = proc.time()#
	MLE <- ComputeMLE(X,Y,b0,n,m)#
	mle_hat = MLE$beta#
	time_mle = (proc.time() -starter_mle)[3]#
	# MLE_Pan#
	starter_mle_Pan = proc.time()#
	MLE_Pan <- ComputeMLE_Pan(X,Y,b0,n,m)#
	mle_Pan_hat = MLE_Pan$beta#
	time_mle_Pan = (proc.time() -starter_mle_Pan)[3]#
	 normMat[j,]  = c(sqrt(n)*norm((mle_hat- b0),"2")/sqrt(m),sqrt(n)*norm((mle_Pan_hat-b0),"2")/sqrt(m))#
	timeMat<-rbind(timeMat,c(time_mle,time_mle_Pan))	#
}#
#
colnames(timeMat) <- c("Hooke","Pan")#
pdf("BoxPlot_beta_err_and_time.pdf")#
boxplot(normMat, main= "Boxplot of sqrt(n/d)||beta_hat-beta_0||_2", las=2)#
boxplot(timeMat, main="Run Times", las=2) #
dev.off()#
#
A <- MLE$Lambda#
B <- MLE$F#
   x<-A[,1]#
   y<-A[,2]#
   f <- function(x) {x^3}#
   x1<-seq(min(x),max(x),by=0.01)#
   y1<-f(x1)#
   plot(c(-100000,-100000),xlim=c(min(x),max(x)), ylim=c(0,max(y)), main= "", ylab="",xlab="",bty="n",las=1)#
   lines(x, y,lty=1,type ="s")#
   lines(x1,y1,lwd=1,col="red")#
   f <- function(x) {1-exp(-x^3)}#
   x<-B[,1]#
   y<-B[,2]#
   x1<-seq(min(x),max(x),by=0.01)#
   y1<-f(x1)#
   plot(c(-100000,-100000),xlim=c(min(x),max(x)), ylim=c(0,max(y)), main= "", ylab="",xlab="",bty="n",las=1)#
   lines(x, y,lty=1,type ="s")#
   lines(x1,y1,lwd=1,col="red")
x<-A[,1]#
   y<-A[,2]#
   f <- function(x) {x^3}#
   x1<-seq(min(x),max(x),by=0.01)#
   y1<-f(x1)#
   plot(c(-100000,-100000),xlim=c(min(x),max(x)), ylim=c(0,max(y)), main= "", ylab="",xlab="",bty="n",las=1)#
   lines(x, y,lty=1,type ="s")#
   lines(x1,y1,lwd=1,col="red")
